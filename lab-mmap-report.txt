在完成mmap的过程中，主要遇到的问题是要想清楚如何在一个进程中保存其mmap的文件。
这一问题实际上又构成了一个内存分配的问题，由于xv6在内核态没有实现malloc函数以
及free的函数，保存mmap的那段内存的分配和释放得单独实现。因此，我模仿了用户态的
内存管理，完成了这段内存的分配。

接下来在处理page fault时也会遇到另一个问题，也就是因为部分页的权限是不能写的，
但要从文件中读入到内存就要求这段内存可写，因此需要在写入内容后重新修改读写权限，
同时也需要清空dirty bit。

最后在完成unmap部分时，主要也是释放内存的部分比较麻烦，当然也需要注意在exit处
释放掉未释放的内存，否则一旦出错就会导致panic。